<%@ Page Language="C#" AutoEventWireup="true" CodeBehind="Easy Mobile.aspx.cs" Inherits="Easyworld.Easy_Mobile" %>

<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml">
<head runat="server">
    <title>Easyworld Mobile Chat</title>

   
     <meta name="viewport" content="width=device-width"  />
     <link rel="stylesheet" href="Style/Mobile.css" />
  
     <!--Script references. -->
    <!--Reference the jQuery library. -->
    <script src="script/jquery-3.3.1.min.js" "></script>

    <script type="text/javascript"  src="scripts/myscript/specialeffect.js"></script> 

    <!--Reference the SignalR library. -->
    <script src="Scripts/jquery.signalR-2.2.2.js"></script>


    <!--Reference the autogenerated SignalR hub script. -->
    <script src="/signalr/hubs"></script>


     <!--Reference the adapter. -->
    <script src="script/adapter.js"></script>

    <!--Add script to update the page and send messages.-->
    <script type="text/javascript">


        $(function () {

            var url = new URL(location.href);
            var searcheParams = new URLSearchParams(url.search);

            var fromAndroid = searcheParams.get('device');

            var UsernameToCal = searcheParams.get('UsernameToCal');

            var connectedUser;

            var username = searcheParams.get('name');
            var password = searcheParams.get('i');
           

            var targetUsername;

            var localVideo = document.querySelector('#localVideo');
            var remoteVideo = document.querySelector('#remoteVideo');

            var openV = searcheParams.get('o');
            //var offer;
            //var From = searcheParams.get('UsernameToCal');

            var myPeerConnection;

            var mediaConstraints = {
                audio: true, // We want an audio track
                video: true // ...and we want a video track
            };

            var person;

            // Declare a proxy to reference the hub.
            //var chat = $.connection.easyHub;
            var chat = $.connection.easyHub;

            //Create a fuction to handle the responses from the server
            chat.client.loginResponse = function (data) {

                //Check the type of response fron the server
                switch (data.type) {

                    case "login":
                        handleLogin(data.success);
                        break;

                    case "offer":

                        //Save the 'offer' and the 'from'
                       // offer = data.offer;
                        //From = data.from;


                         handleOffer(data.offer,data.From);
                        //Activate the Pick_Call Button
                        //When the Pick_Call Button is clicked, it will handle the offer
                       // document.getElementById("Pick_Call").style.display = "block";
                       
                        break;

                    case "answer":
                        handleAnswer(data.answer);
                        break;

                    case "candidate":
                        handleCandidate(data.candidate);
                        break;

                    case "openV":
                        handleOpenV(data.openV);
                        break;

                    default:
                        break;
                }

            };

            chat.client.connect = function (message) {

                // Html encode display name and message.

            };


            ////////////////111111111111111111111111111111111111111111111111111111111111111111111111111
            //-----------------------------HANDLE INCOMING CALL OR MAKE A CALL-------------------------
            function handleLogin(success) {

                if (success === "false") {
                    alert('You have used a wrong password! Try another');
                }
                else {

                    //Receive call if there is an offer, or make call if there is no offer
                    if (openV === "open") {

                        //Tell the remote peer to connect
                        chat.server.sendWebrtcConnData({
                            type: "openV",
                            openV: "open", 
                            From: username,
                            To: UsernameToCal
                        });
                    }

                    if (openV === "opened") {

                        //Tell the remote peer that you have open a browser
                        chat.server.sendWebrtcConnData({
                            type: "openV",
                            openV: "opened", 
                            From: username,
                            To: UsernameToCal
                        });
                    }

                   
                }
            }

            function handleOpenV(respons) {

                if (respons === "opened") {
                      invite();
                }

            }



            ////////////ccccccccccccccccccccccccccccccccccccccccccc
            chat.client.CheckCandidate = function (message) {

                // Html encode display name and message.

            };
            ///////////////ccccccccccccccccccccccccccccccccccccccc



            chat.client.easyMsg = function (message, nam) {


            };



            //Receive the offer----------------------------------------------
            function handleOffer(offer, from) {

             

                person = "Callee";

                var localStream = null;

               
                     targetUsername = from;
                
                
               

                createPeerConnection();

                var desc = JSON.parse(offer);

                myPeerConnection.setRemoteDescription(desc).then(function () {
                    return navigator.mediaDevices.getUserMedia(mediaConstraints);
                })
                .then(function (stream) {
                    localStream = stream;

                    localVideo.srcObject = localStream;
                    return myPeerConnection.addStream(localStream);
                })

                .then(function () {
                    return myPeerConnection.createAnswer();
                })

                .then(function (answer) {
                    return myPeerConnection.setLocalDescription(answer);
                })

                .then(function () {

                    chat.server.sendWebrtcConnData({
                        type: "answer",
                        answer: JSON.stringify(myPeerConnection.localDescription),
                        From: username,
                        To: from
                    });

                })
                 .catch(handleGetUserMediaError);

            }


            ////////////////////////////////////////////////

            $("#Login").click(function () {
                $.connection.hub.start().done(function () {

                    chat.server.sendWebrtcConnData({
                        type: "login",
                        name: username,//Email address 
                        p: password
                    });
                });
            });


            ///////////////////////////////////////////////
            //End the Call--------------------------------------------
            $("#Hang_Up").click(function () {

                hangUpCall();
                $("Hang_Up").addClass('Hang_up_Clicked');
                $("Pick_Call").removeClass('Pick_Call_Clicked');
            });

            //Pick the Call-----------------------------------------
            $("#Pick_Call").click(function () {

                //Animate the button
                $("Pick_Call").addClass('Pick_Call_Clicked');
                $("Hang_Up").removeClass('Hang_up_Clicked');

                //Handle the offer
                handleOffer(offer, From);

            });

            ////////////////////////////////////////////////
            //Send Message-------------------------------------
            $("#Send").click(function () {
                chat.server.sendWebrtcConnData({
                    type: "msg",
                    msg: $("#Msg").val(),
                    From:username,
                    To: UsernameToCal
                });
            });
            ///////////////////////////////////////////////////

            ////////////////////////////////////////////////

            $("#SendRtc").click(function () {
                var val = $("#Msg").val();

                sendMessage(val);

            });

            ///////////////////////////////////////////////////

            function reportError(error) {
              

            }

            ////////////////////////////////////////////////

            function sendMessage(msg) {
                switch (dataChannel.readyState) {
                    case "connecting":

                        break;
                    case "open":
                        dataChannel.send(msg);

                        break;
                    case "closing":
                       
                        break;
                    case "closed":
                       
                        break;
                }
            }

            /////////////////////////////////////////////////////////////////

            function handleMsg(message, name) {

            }

            /////////////////////////////////////////////////////////////////

            function handleLeave() {
                connectedUser = null;
                remoteVideo.src = null;
                myPeerConnection.close();
                myPeerConnection.onicecandidate = null;
                myPeerConnection.onaddstream = null;
            };

            ///////////////////////////////////////////////////////////////////


            //New Functions--------------------------------------------------

            //Invite--------------------------------------------------
            function invite() {

                if (myPeerConnection) {
                    alert("You can't start a call because you already have one open!");
                } else {

                    targetUsername = UsernameToCal;

                    createPeerConnection();

                    navigator.mediaDevices.getUserMedia(mediaConstraints)
                    .then(function (localStream) {
                        localVideo.srcObject = localStream;
                        myPeerConnection.addStream(localStream);
                    })
                    .catch(handleGetUserMediaError);
                }
            }

            //Handle getUserMedia Error---------------------------------
            function handleGetUserMediaError(e) {
                switch (e.name) {
                    case "NotFoundError":
                        alert("Unable to open your call because no camera and/or microphone" +
                              "were found.");
                        break;
                    case "SecurityError":
                    case "PermissionDeniedError":
                        // Do nothing; this is the same as the user canceling the call.
                        break;
                    default:
                        alert("Error opening your camera and/or microphone: " + e.message);
                        break;
                }

                closeVideoCall();
            }

            //Create the peer connection-----------------------------------
            function createPeerConnection() {

                var configuration = {
                    "iceServers": [{
                        'urls': [
                            'turn:webrtcweb.com:7788', // coTURN 7788+8877
                            'turn:webrtcweb.com:4455', // restund udp
                            'turn:webrtcweb.com:5544' // restund tcp
                        ],
                        'username': 'muazkh',
                        'credential': 'muazkh'
                    }
                        ,
                             { 'urls': 'stun:stun2.1.google.com:19302' }]
                };

                myPeerConnection = new RTCPeerConnection(configuration);

                //Event Handlers
                myPeerConnection.onicecandidate = handleICECandidateEvent;
                myPeerConnection.onaddstream = handleAddStreamEvent;
                myPeerConnection.onremovestream = handleRemoveStreamEvent;
                // myPeerConnection.oniceconnectionstatechange = handleICEConnectionStateChangeEvent;
                // myPeerConnection.onicegatheringstatechange = handleICEGatheringStateChangeEvent;
                //myPeerConnection.onsignalingstatechange = handleSignalingStateChangeEvent;
                myPeerConnection.onnegotiationneeded = handleNegotiationNeededEvent;

            }

            //Handle negotiation needed-------------------------------
            function handleNegotiationNeededEvent() {
                myPeerConnection.createOffer().then(function (offer) {
                    return myPeerConnection.setLocalDescription(offer);
                })
                .then(function () {

                    chat.server.sendWebrtcConnData({
                        type: "offer",
                        offer: JSON.stringify(myPeerConnection.localDescription),
                        From:username,
                        To:UsernameToCal
                    });
                    console.log("offer Sent!");
                    console.log(JSON.stringify(myPeerConnection.localDescription));

                })
                .catch(reportError);
            }

            //Send Ice Candidate-------------------------------------
            function handleICECandidateEvent(event) {
                if (event.candidate) {

                    chat.server.sendWebrtcConnData({
                        type: "candidate",
                        candidate: JSON.stringify(event.candidate) ,
                        From: username,
                        To: targetUsername
                    });

                 
                }
            }

            //Receive Candidate--------------------------------------
            function handleCandidate(candidate) {

                myPeerConnection.addIceCandidate(new RTCIceCandidate(JSON.parse(candidate)))
                .catch(reportError);
             
              
            };

            //Handle add stream--------------------------------------------
            function handleAddStreamEvent(event) {
                remoteVideo.srcObject = event.stream;
                // document.getElementById("hangup-button").disabled = false;
            }

            function handleAnswer(answersdp) {

               
                 console.log("I got answer");
                console.log(answersdp);


                let ans = answersdp;

                //The caller use this to save the sdp from the callee
                ans = answersdp.replace("a=setup:actpass", "a=setup:active");
                answer = JSON.parse(ans);
               
                myPeerConnection.setRemoteDescription(new RTCSessionDescription(answer));

             

            };


            function handleRemoveStreamEvent(event) {
                closeVideoCall();
            }

            function hangUpCall() {

                chat.server.sendWebrtcConnData({
                    type: "leave",
                    To: UsernameToCal,
                    From:username
                });

                handleLeave();
                closeVideoCall();

            }

            function closeVideoCall() {

                if (myPeerConnection) {
                    if (remoteVideo.srcObject) {
                        remoteVideo.srcObject.getTracks().forEach(track => track.stop());
                        remoteVideo.srcObject = null;
                    }

                    if (localVideo.srcObject) {
                        localVideo.srcObject.getTracks().forEach(track => track.stop());
                        localVideo.srcObject = null;
                    }

                    localStream.getAudioTracks()[0].enabled = false;

                    myPeerConnection.close();
                    myPeerConnection = null;
                }

                //document.getElementById("hangup-button").disabled = true;
                targetUsername = null;
            }


            //Start the Call---------------------
            if (username != "") {
                person = "Caller";
                //START INVITATION

                //login to Chat Hub
                $.connection.hub.start().done(function () {

                    chat.server.sendWebrtcConnData({
                        type: "login",
                        name: username,//Email address 
                        p: password
                    });


                });


            }

            //-----------------------------------


            function hangUpCall() {

                chat.server.sendWebrtcConnData({
                    type: "leave",
                    To: UsernameToCal,
                    From: username
                });

                closeVideoCall();
                handleLeave();
               

            }





        });
    </script>

</head>
<body>
    <form id="form1" runat="server">

     
        <div id="Container">

             <div  id="RemoteVideo_Mobile">
                                 <video id="remoteVideo"  autoplay="autoplay"></video> 
                         </div>

            <div id="LocalVideo_Conbtainer">
                <div  id="LocalVideo_Mobile" class="responsive">
                                 <video id="localVideo" autoplay="autoplay"></video> 
                         </div>
            </div>

             <div id="HangUp_Container">
                 
                    <img id="Pick_Call" alt="Hang Up Image" src="images/Pick_Calls.png" />
                 <img id="Hang_Up" alt="Hang Up Image" src="images/Hang Up.png" />
            </div>
                      
                        
                       
          </div>
        
             
       
    </form>
</body>
</html>
