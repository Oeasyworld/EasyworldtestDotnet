<%@ Page Language="C#" AutoEventWireup="true" CodeBehind="Chat.aspx.cs" Inherits="Easyworld.Chat" %>

<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <link rel="stylesheet" href="Style/Easystyle.css" />
   
     <link rel="stylesheet" href="Style/DesktopStyle.css" />

    <title>Easyworld Video Calling</title>

     <!--Script references. -->
    <!--Reference the jQuery library. -->
    <script src="script/jquery-3.3.1.min.js" "></script>

    <!--Reference the SignalR library. -->
    <script src="Scripts/jquery.signalR-2.2.2.js"></script>

    <!--Reference the autogenerated SignalR hub script. -->
    <script src="/signalr/hubs"></script>

     <!--Reference the adapter. -->
    <script src="script/adapter.js"></script>

    <!--Add script to update the page and send messages.-->
    <script type="text/javascript">


        $(function () {

            let UsernameToCal = $("#UsernameToCall").val;
            let localVideo = document.querySelector('#localVideo');
            let remoteVideo = document.querySelector('#remoteVideo');
            let username;
            let password;
            let myPeerConnection;
            let targetUsername;
            let person;
            let mediaConstraints = {
                audio: true, // We want an audio track
                video: true // ...and we want a video track
            };
           
            // Declare a proxy to reference the hub.
            //var chat = $.connection.easyHub;
            var chat = $.connection.easyHub;
           
            //Create a fuction to handle the responses from the server
            chat.client.loginResponse = function (data) {

                //Check the type of response fron the server
                switch (data.type) {

                        case "login":
                        handleLogin(data.success);
                        break;

                        case "offer":
                            document.getElementById("AcceptBtn").style.display = "block";
                            handleOffer(data.offer, data.From);
                        break;
                       
                        case "answer":
                        handleAnswer(data.answer);
                        break;

                        case "candidate":
                        handleCandidate(data.candidate);
                        break;

                        default:
                        break;
                     }
             
            };
          
            chat.client.connect = function (message) {

            
               
            };


            ////////////////111111111111111111111111111111111111111111111111111111111111111111111111111
            function handleLogin(success) {

                if (success === "false") {
                    alert('You have used a wrong password! Try another');
                }                 
                else {
                    $('#Response').append('<li><strong>' + "Login Successfull"
                 + '</li>');
                }
            }
        
         
            ////////////ccccccccccccccccccccccccccccccccccccccccccc
            chat.client.CheckCandidate = function (message) {

                // Html encode display name and message.

            };
            ///////////////ccccccccccccccccccccccccccccccccccccccc



            chat.client.easyMsg = function (message, nam) {

                // Html encode display name and message.

            };
          


            //Receive the offer----------------------------------------------
            function handleOffer(offer, From) {

                person = "Callee";

                var localStream = null;

                targetUsername = From;

                createPeerConnection();

                var desc =  JSON.parse(offer);

                myPeerConnection.setRemoteDescription(desc).then(function () {
                    return navigator.mediaDevices.getUserMedia(mediaConstraints);
                })
                .then(function (stream) {
                    localStream = stream;

                    localVideo.srcObject = localStream;
                    return myPeerConnection.addStream(localStream);
                })

                .then(function () {
                    return myPeerConnection.createAnswer();
                })

                .then(function (answer) {
                    return myPeerConnection.setLocalDescription(answer);
                })

                .then(function () {

                     chat.server.sendWebrtcConnData({
                         type: "answer",
                         answer: JSON.stringify(myPeerConnection.localDescription),
                         From: targetUsername,
                         To: From
                     });

                })
                 .catch(handleGetUserMediaError);

            }
            

            ////////////////////////////////////////////////

            $("#Login").click(function () {
                $.connection.hub.start().done(function () {

                    username = $("#Username").val();
                    password = $("#Password").val();


                    chat.server.sendWebrtcConnData({
                        type: "login",
                        name: username,//Email address 
                        p: password
                    });
                });
            });


            ///////////////////////////////////////////////
            //End the Call--------------------------------------------
            $("#HangUp").click(function () {

                hangUpCall();

            });

            ///////////////////////////////////////////////
            //Pick the Call----------------------------------
            $("#AcceptBtn").click(function () {



            });

         ////////////////////////////////////////////////
            //Start the Call---------------------------------
                $("#MakeCall").click(function () {

                    person = "Caller";
                    UsernameToCal = $("#UsernameToCall").val();

                    //START INVITATION
                    invite();
      

                });

            ////////////////////////////////////////////////
            //Send Message-------------------------------------
                $("#Send").click(function () {
                    chat.server.sendWebrtcConnData({
                        type: "msg",
                        msg: $("#Msg").val(),
                        From: username,
                        To: UsernameToCal
                    });
                });
            ///////////////////////////////////////////////////

            ////////////////////////////////////////////////

                $("#SendRtc").click(function () {
                    var val = $("#Msg").val();
                   
                   sendMessage(val);
                   
                });

            ///////////////////////////////////////////////////

                function reportError(error) {
                    console.log(error.name + ": " + error.message);
                 }

            ////////////////////////////////////////////////

                function sendMessage(msg) {
                    switch (dataChannel.readyState) {
                        case "connecting":
                       
                            break;
                        case "open":
                             dataChannel.send(msg);

                            break;
                        case "closing":
                           
                            break;
                        case "closed":
                           
                            break;
                    }
                }
      
                chat.client.showAcceptBtn = function () {
                    $('#Response').append('<li><strong>' + "Accept button shown"
                   + '</li>');
                  

                };


            /////////////////////////////////////////////////////////////////

                function handleMsg(message, name) {

                   
                }

            /////////////////////////////////////////////////////////////////

            function handleLeave() {
                connectedUser = null;
                remoteVideo.src = null;
                yourConn.close();
                yourConn.onicecandidate = null;
                yourConn.onaddstream = null;
            };

            ///////////////////////////////////////////////////////////////////


            //New Functions--------------------------------------------------

            //Invite--------------------------------------------------
            function invite() {

                if (myPeerConnection) {
                    alert("You can't start a call because you already have one open!");
                } else {
                   

                    targetUsername = UsernameToCal;

                    createPeerConnection();

                    navigator.mediaDevices.getUserMedia(mediaConstraints)
                    .then(function (localStream) {
                        localVideo.srcObject  = localStream;
                        myPeerConnection.addStream(localStream);
                    })
                    .catch(handleGetUserMediaError);
                }
            }



            //Handle getUserMedia Error---------------------------------
            function handleGetUserMediaError(e) {
                switch (e.name) {
                    case "NotFoundError":
                        alert("Unable to open your call because no camera and/or microphone" +
                              "were found.");
                        break;
                    case "SecurityError":
                    case "PermissionDeniedError":
                        // Do nothing; this is the same as the user canceling the call.
                        break;
                    default:
                        alert("Error opening your camera and/or microphone: " + e.message);
                        break;
                }

                closeVideoCall();
            }


            //Create the peer connection-----------------------------------
            function createPeerConnection() {

                var configuration = {
                    "iceServers": [{
                        'urls': [
                            'turn:webrtcweb.com:7788', // coTURN 7788+8877
                            'turn:webrtcweb.com:4455', // restund udp
                            'turn:webrtcweb.com:5544' // restund tcp
                        ],
                        'username': 'muazkh',
                        'credential': 'muazkh'
                    }
                        ,
                             { 'urls': 'stun:stun2.1.google.com:19302' }]
                };

                myPeerConnection = new RTCPeerConnection(configuration);

                //Event Handlers
                myPeerConnection.onicecandidate = handleICECandidateEvent;
                myPeerConnection.onaddstream = handleAddStreamEvent;
                myPeerConnection.onremovestream = handleRemoveStreamEvent;
               // myPeerConnection.oniceconnectionstatechange = handleICEConnectionStateChangeEvent;
               // myPeerConnection.onicegatheringstatechange = handleICEGatheringStateChangeEvent;
                //myPeerConnection.onsignalingstatechange = handleSignalingStateChangeEvent;
                myPeerConnection.onnegotiationneeded = handleNegotiationNeededEvent;


            }


            //Handle negotiation needed-------------------------------
            function handleNegotiationNeededEvent() {
                myPeerConnection.createOffer().then(function (offer) {
                    return myPeerConnection.setLocalDescription(offer);
                })
                .then(function () {
                   
                    chat.server.sendWebrtcConnData({
                        type: "offer",
                        offer: JSON.stringify(myPeerConnection.localDescription),
                        From: username,
                        To: UsernameToCal
                    });
                    console.log("offer Sent!");

                })
                .catch(reportError);
            }


            //Send Ice Candidate-------------------------------------
            function handleICECandidateEvent(event) {
                if (event.candidate) {

                    chat.server.sendWebrtcConnData({
                        type: "candidate",
                        candidate: JSON.stringify(event.candidate) ,
                        From: username,
                        To: targetUsername

                    });
                }
            }


            //Receive Candidate--------------------------------------
            function handleCandidate(candidate) {
                myPeerConnection.addIceCandidate(new RTCIceCandidate(JSON.parse(candidate) ))
                .catch(reportError);

            }


            //Handle add stream--------------------------------------------
            function handleAddStreamEvent(event) {

                remoteVideo.srcObject = event.stream;
            
            }
            
          
            function handleAnswer(answersdp) {

                //The caller use this to save the sdp from the callee

                console.log(answersdp);

                answer = JSON.parse(answersdp);
                myPeerConnection.setRemoteDescription(new RTCSessionDescription(answer));
              
            }


            function handleRemoveStreamEvent(event) {
                closeVideoCall();
            }

            function hangUpCall() {

                chat.server.sendWebrtcConnData({
                    type: "leave",
                    To: $("#UsernameToCall").val(),
                    From: $("#Username").val()
                });

                handleLeave();
                closeVideoCall();
               
            }


            function closeVideoCall() {

                if (myPeerConnection) {
                    if (remoteVideo.srcObject) {
                        remoteVideo.srcObject.getTracks().forEach(track => track.stop());
                        remoteVideo.srcObject = null;
                    }

                    if (localVideo.srcObject) {
                        localVideo.srcObject.getTracks().forEach(track => track.stop());
                        localVideo.srcObject = null;
                    }

                    myPeerConnection.close();
                    myPeerConnection = null;
                }

                //document.getElementById("hangup-button").disabled = true;

                targetUsername = null;
            }




        });
    </script>


   
   
</head>
<body>
    <form id="form1" runat="server">

        <div id="callPage">
        <div id="RemoteVideoDiv">

                         <video id="remoteVideo" autoplay="autoplay"></video> 


                          <div  id="LocalVideoDiv">
                                 <video id="localVideo" autoplay="autoplay"></video> 
                         </div>


            
        </div>


            <input id="AcceptBtn" type="button" value="Answer" />
             <div id="Response">Response</div>

            <div id="ButtonRow">
                <div class="cell1">


                <input id="UsernameToCall" type="text" placeholder="Username To Call" /></div>
                <div class="cell2"> <input id="MakeCall" type="button" value="Call" /> </div>
               

               
                <div class="cell2"><input id="HangUp" type="button" value="Hang Up" /></div>


            </div>


            <div id="ButtonRow2">
                <div class="cell1">


                <input id="Msg" type="text" placeholder="Type your message here" /></div>
                <div class="cell2"> <input id="Send" type="button" value="Send" /> </div>
               
                <div class="cell2"> <input id="SendRtc" type="button" value="SendRtc" /> </div>
               
               


            </div>



    </div>




        <div id="loginPage">

             <div class="cell3">WebRCT Video Demo. Signin</div>
           
            <div class="cell3"> <input id="Username" type="text" placeholder="Username" /></div>     
             <div class="cell3"> <input id="Password" type="text" placeholder="Password" /></div>      
            <div class="cell3"><input id="Login" type="button" value="Login" /></div>

        </div>



    </form>
</body>
</html>

